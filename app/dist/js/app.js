!function(e){function n(e){e.when("/etiquetas",{controller:"etiquetasController",controllerAs:"ctrl",templateUrl:"etiquetas/choose_idioma.html"}).when("/etiquetas/:lang",{controller:"etiquetasController",controllerAs:"ctrl",templateUrl:"etiquetas/etiquetas.html"})}e.module("app.etiquetas",["ngRoute"]).config(n),n.$inject=["$routeProvider"]}(window.angular),function(e){function n(e){e.when("/idiomas",{controller:"idiomaController",controllerAs:"ctrl",templateUrl:"idiomas/idiomas.html",title:"Idiomas"})}e.module("app.idiomas",["ngRoute"]).config(n),n.$inject=["$routeProvider"]}(window.angular),function(e){e.module("app.settings",["ngRoute"]).config(["$routeProvider",function(e){e.when("/settings",{controller:"settingsController",controllerAs:"ctrl",templateUrl:"settings/settings.html",title:"Configuración"})}])}(window.angular),function(e){function n(e,n){function o(o){var r=e.defer();return n.readSettings().then(function(e){var n=i.join(e.localLang,o,"lang.json");t.readFile(n,"utf8",function(e,n){e&&r.reject(e);try{var t=JSON.parse(n.trim());r.resolve(t)}catch(e){r.reject(e)}})}),r.promise}return{getLangTags:o}}e.module("app.etiquetas").service("etiquetasService",n);var t=require("fs"),i=require("path");n.$inject=["$q","configService"]}(window.angular),function(e){function n(e,n){function r(){var r=n.defer();return e.readSettings().then(function(e){var n=i.join(e.localLang,o);t.readFile(n,"utf8",function(e,n){e&&r.reject(e);try{var t=JSON.parse(n.trim());r.resolve(t)}catch(e){r.reject(e)}})}),r.promise}function a(a){var c=n.defer();return e.readSettings().then(function(e){var n=i.join(e.localLang,o),l=i.join(e.localLang,a.id),s=i.join(l,"lang.json");r().then(function(e){u(e,a.id)?c.reject({code:"EXTLANG",description:"Este idioma ya existe"}):t.mkdir(l,function(i){i&&c.reject(i),t.writeFile(s,"{}","utf8",function(i){i&&c.reject(i),e.push(a);var o=JSON.stringify(e);t.writeFile(n,o,"utf8",function(e){e&&c.reject(e),c.resolve(!0)})})})})}),c.promise}function c(a){var c=n.defer();return e.readSettings().then(function(e){var n=i.join(e.localLang,o),u=i.join(e.localLang,a.id);r().then(function(e){var o=l(e,a.id);t.readdir(u,function(e,r){e&&c.reject(e),r.forEach(function(e){var n=i.join(u,e);t.unlinkSync(n)}),t.rmdir(u,function(e){e&&c.reject(e);var i=JSON.stringify(o);t.writeFile(n,i,"utf8",function(e){e&&c.reject(e),c.resolve(!0)})})})})}),c.promise}function u(e,n){if(e instanceof Array){var t=e.filter(function(e){return e.id==n});return t.length>0}throw"not an array"}function l(e,n){return e.filter(function(e){return e.id!=n})}return{getInstaledLanguages:r,saveLanguage:a,deleteLanguage:c}}var t=require("fs"),i=require("path");const o="languages.json";e.module("app.idiomas").service("idiomasService",n),n.$inject=["configService","$q"]}(window.angular),function(e){"use strict";function n(e){function n(n){var o=e.defer();return t.writeFile(i,JSON.stringify(n),function(e){e&&o.reject(e),o.resolve(!0)}),o.promise}function o(){var n=e.defer();return t.exists(i,function(e){e?t.readFile(i,"utf8",function(e,t){e&&n.reject(e),n.resolve(JSON.parse(t.trim()))}):r().then(function(){return o()})}),n.promise}function r(){var n=e.defer();return t.writeFile(i,"{}","utf8",function(e){e&&n.reject(e),n.resolve(!0)}),n.promise}return{saveSettings:n,readSettings:o}}var t=require("fs"),i="./config.json";e.module("app.config",[]).service("configService",n),n.$inject=["$q"]}(window.angular),function(e){function n(e){function n(e){}return{alert:n}}e.module("app.utils",[]).service("utilsService",n),n.$inject=["$mdDialog"]}(window.angular),function(e){"use strict";function n(e){function n(n){return e.saveSettings(n)}function t(){return e.readSettings()}return{saveSettings:n,readSettings:t}}require("fs");e.module("app.settings").service("settingsService",n),n.$inject=["configService"]}(window.angular),function(e){function n(e,n,t,i,o){function r(e){console.log(e),n.path("/etiquetas/"+e.id)}function a(e){o.getLangTags(e).then(function(e){c.tags=e})}var c=this;c.open=r,i.lang?a(i.lang):t.getInstaledLanguages().then(function(e){c.idiomas=e})}e.module("app.etiquetas").controller("etiquetasController",n),n.$inject=["$scope","$location","idiomasService","$routeParams","etiquetasService"]}(window.angular),function(e){function n(n,t,i,o){function r(){o.getInstaledLanguages().then(function(e){n.idiomas=[].concat(e)})}function a(n){l.idioma={},t.show({title:"Agregar Idioma",controller:u,controllerAs:"ctrl",templateUrl:"idiomas/add-idioma.html",parent:e.element(document.body),targetEvent:n,clickOutsideToClose:!0})}function c(n,i){function r(){function r(){var i=t.alert().title("Proceso Completado").textContent("El idioma ha sido eleminado con exito!").parent(e.element(document.body)).ariaLabel("confirmation").ok("Aceptar").targetEvent(n);l.getInstaledLanguages(),t.show(i)}function a(i){var o=t.alert().title("Algo no anda bien").textContent("Hubo un error eliminando el idioma seleccionado, "+i).parent(e.element(document.body)).ariaLabel("confirmation").ok("Aceptar").targetEvent(n);t.show(o)}o.deleteLanguage(i).then(r,a)}var a=t.confirm().title("Desea Eliminar el idioma seleccionado?").textContent("Este proceso eliminara el idioma seleccionado asi como cualquier etiqueta creada").ok("Eliminar").parent(e.element(document.body)).ariaLabel("confirmation").cancel("Cancelar").targetEvent(n);t.show(a).then(r)}function u(){function e(e){i(function(){function e(e){o.getInstaledLanguages().then(function(e){n.idiomas=[].concat(e)}),r()}function t(e){a.idioma.error=!0}console.log(a);var i={id:a.idioma.id.toLowerCase(),description:a.idioma.description.toUpperCase()};o.saveLanguage(i).then(e,t)})}function r(){t.cancel()}var a=this;a.addIdioma=e,a.closeAddDialog=r}var l=this;l.openAddIdioma=a,l.getInstaledLanguages=r,l.delete=c,l.getInstaledLanguages()}e.module("app.idiomas").controller("idiomaController",n),n.$inject=["$scope","$mdDialog","$timeout","idiomasService"]}(angular),function(e){function n(e,n,t,i){function o(e){t.saveSettings(l.form).then(function(n){var t=i.alert();t.textContent("Cambios Guardados con Exito!").title("Alerta!").targetEvent(e).ok("Aceptar"),i.show(t)})}function r(){t.readSettings().then(function(e){l.form=e})}function a(){u(function(e,n,t){l.form.localLang=n[0]})}function c(){u(function(e,n,t){l.form.remoteLang=n[0]})}function u(e){var t=require("electron").ipcRenderer;t.send("open-file-dialog"),t.once("selected-directory",function(t,i){n(e(t,i))})}var l=this;l.form={},l.chooseLocalLang=a,l.chooseRemoteLang=c,l.saveSettings=o,l.readSettings=r,l.readSettings()}e.module("app.settings").controller("settingsController",n),n.$inject=["$scope","$timeout","settingsService","$mdDialog"]}(window.angular),function(e){function n(e){e.$on("$routeChangeStart",function(n,t,i){e.currentTitle=t.$$route.title})}function t(e,n,t){function i(){n("menuLeft").close()}e.toggleMenu=function(){n("menuLeft").toggle()},e.open=function(e){t.path(e),i()},e.menu={main:[{icon:"language",menuText:"Idiomas",url:"/idiomas"},{icon:"code",menuText:"Etiquetas",url:"/etiquetas"}],settings:[{icon:"settings",menuText:"Configuración",url:"/settings"}]}}var i=["templates","app.config","app.settings","app.idiomas","app.etiquetas","ngMessages","ngMaterial","ngAnimate"];e.module("lang-tag-manager",i).run(n).controller("mainController",t),n.$inject=["$rootScope"],t.$inject=["$scope","$mdSidenav","$location"]}(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
