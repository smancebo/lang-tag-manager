!function(e){function t(e){e.when("/etiquetas",{controller:"etiquetasController",controllerAs:"ctrl",templateUrl:"etiquetas/choose_idioma.html",title:"Etiquetas"}).when("/etiquetas/:lang",{controller:"etiquetasController",controllerAs:"ctrl",templateUrl:"etiquetas/etiquetas.html",title:"Etiquetas"})}e.module("app.etiquetas",["ngRoute"]).config(t),t.$inject=["$routeProvider"]}(window.angular),function(e){function t(e){e.when("/idiomas",{controller:"idiomaController",controllerAs:"ctrl",templateUrl:"idiomas/idiomas.html",title:"Idiomas"})}e.module("app.idiomas",["ngRoute"]).config(t),t.$inject=["$routeProvider"]}(window.angular),function(e){e.module("app.settings",["ngRoute"]).config(["$routeProvider",function(e){e.when("/settings",{controller:"settingsController",controllerAs:"ctrl",templateUrl:"settings/settings.html",title:"Configuración"})}])}(window.angular),function(e){function t(e,t){function o(o,a){var c=e.defer();return r(o).then(function(e){t.readSettings().then(function(t){e[a.key.toLocaleUpperCase()]=a.value;var r=JSON.stringify(e),u=i.join(t.localLang,o,"lang.json");n.writeFile(u,r,"utf8",function(e){e&&c.reject(e),c.resolve(!0)})})}),c.promise}function r(o){var r=e.defer();return t.readSettings().then(function(e){var t=i.join(e.localLang,o,"lang.json");n.readFile(t,"utf8",function(e,t){e&&r.reject(e);try{var n=JSON.parse(t.trim());r.resolve(n)}catch(e){r.reject(e)}})}),r.promise}return{getLangTags:r,saveLangTag:o}}e.module("app.etiquetas").service("etiquetasService",t);var n=require("fs"),i=require("path");t.$inject=["$q","configService"]}(window.angular),function(e){function t(e,t){function r(){var r=t.defer();return e.readSettings().then(function(e){var t=i.join(e.localLang,o);n.readFile(t,"utf8",function(e,t){e&&r.reject(e);try{var n=JSON.parse(t.trim());r.resolve(n)}catch(e){r.reject(e)}})}),r.promise}function a(a){var c=t.defer();return e.readSettings().then(function(e){var t=i.join(e.localLang,o),l=i.join(e.localLang,a.id),s=i.join(l,"lang.json");r().then(function(e){u(e,a.id)?c.reject({code:"EXTLANG",description:"Este idioma ya existe"}):n.mkdir(l,function(i){i&&c.reject(i),n.writeFile(s,"{}","utf8",function(i){i&&c.reject(i),e.push(a);var o=JSON.stringify(e);n.writeFile(t,o,"utf8",function(e){e&&c.reject(e),c.resolve(!0)})})})})}),c.promise}function c(a){var c=t.defer();return e.readSettings().then(function(e){var t=i.join(e.localLang,o),u=i.join(e.localLang,a.id);r().then(function(e){var o=l(e,a.id);n.readdir(u,function(e,r){e&&c.reject(e),r.forEach(function(e){var t=i.join(u,e);n.unlinkSync(t)}),n.rmdir(u,function(e){e&&c.reject(e);var i=JSON.stringify(o);n.writeFile(t,i,"utf8",function(e){e&&c.reject(e),c.resolve(!0)})})})})}),c.promise}function u(e,t){if(e instanceof Array){var n=e.filter(function(e){return e.id==t});return n.length>0}throw"not an array"}function l(e,t){return e.filter(function(e){return e.id!=t})}return{getInstaledLanguages:r,saveLanguage:a,deleteLanguage:c}}var n=require("fs"),i=require("path");const o="languages.json";e.module("app.idiomas").service("idiomasService",t),t.$inject=["configService","$q"]}(window.angular),function(e){"use strict";function t(e){function t(t){return e.saveSettings(t)}function n(){return e.readSettings()}return{saveSettings:t,readSettings:n}}require("fs");e.module("app.settings").service("settingsService",t),t.$inject=["configService"]}(window.angular),function(e){"use strict";function t(e){function t(t){var o=e.defer();return n.writeFile(i,JSON.stringify(t),function(e){e&&o.reject(e),o.resolve(!0)}),o.promise}function o(){var t=e.defer();return n.exists(i,function(e){e?n.readFile(i,"utf8",function(e,n){e&&t.reject(e),t.resolve(JSON.parse(n.trim()))}):r().then(function(){return o()})}),t.promise}function r(){var t=e.defer();return n.writeFile(i,"{}","utf8",function(e){e&&t.reject(e),t.resolve(!0)}),t.promise}return{saveSettings:t,readSettings:o}}var n=require("fs"),i="./config.json";e.module("app.config",[]).service("configService",t),t.$inject=["$q"]}(window.angular),function(e){function t(e){function t(e){}return{alert:t}}e.module("app.utils",[]).service("utilsService",t),t.$inject=["$mdDialog"]}(window.angular),function(e){function t(t,n,i,o,r,a,c){function u(){}function l(t){function n(){g(m.langId)}function i(t){var n=a.alert().title("Algo no anda bien").textContent("Hubo un error agregando la etiqueta, "+t).parent(e.element(document.body)).ariaLabel("confirmation").ok("Aceptar").targetEvent($event);a.show(n)}r.saveLangTag(m.langId,t).then(n,i)}function s(e){n.path("/etiquetas/"+e.id)}function g(e){r.getLangTags(e).then(function(t){m.tags=f(t,20),m.totalTags=Object.keys(t).length,m.langId=e,d("txtKey"),m.form={}})}function d(e){var t=c.document.getElementById(e);t.focus()}function f(e,t){var n=Object.keys(e);t=t||n.length;for(var i=[],o=0;o<=t-1;o++){var r={};r.key=n[o],r.value=e[r.key],i.push(r)}return i}var m=this;m.open=s,m.add=l,m.search=u,m.form={},o.lang?g(o.lang):i.getInstaledLanguages().then(function(e){m.idiomas=e})}e.module("app.etiquetas").controller("etiquetasController",t),t.$inject=["$scope","$location","idiomasService","$routeParams","etiquetasService","$mdDialog","$window"]}(window.angular),function(e){function t(t,n,i,o){function r(){o.getInstaledLanguages().then(function(e){t.idiomas=[].concat(e)})}function a(t){l.idioma={},n.show({title:"Agregar Idioma",controller:u,controllerAs:"ctrl",templateUrl:"idiomas/add-idioma.html",parent:e.element(document.body),targetEvent:t,clickOutsideToClose:!0})}function c(t,i){function r(){function r(){var i=n.alert().title("Proceso Completado").textContent("El idioma ha sido eleminado con exito!").parent(e.element(document.body)).ariaLabel("confirmation").ok("Aceptar").targetEvent(t);l.getInstaledLanguages(),n.show(i)}function a(i){var o=n.alert().title("Algo no anda bien").textContent("Hubo un error eliminando el idioma seleccionado, "+i).parent(e.element(document.body)).ariaLabel("confirmation").ok("Aceptar").targetEvent(t);n.show(o)}o.deleteLanguage(i).then(r,a)}var a=n.confirm().title("Desea Eliminar el idioma seleccionado?").textContent("Este proceso eliminara el idioma seleccionado asi como cualquier etiqueta creada").ok("Eliminar").parent(e.element(document.body)).ariaLabel("confirmation").cancel("Cancelar").targetEvent(t);n.show(a).then(r)}function u(){function e(e){i(function(){function e(e){o.getInstaledLanguages().then(function(e){t.idiomas=[].concat(e)}),r()}function n(e){a.idioma.error=!0}console.log(a);var i={id:a.idioma.id.toLowerCase(),description:a.idioma.description.toUpperCase()};o.saveLanguage(i).then(e,n)})}function r(){n.cancel()}var a=this;a.addIdioma=e,a.closeAddDialog=r}var l=this;l.openAddIdioma=a,l.getInstaledLanguages=r,l.delete=c,l.getInstaledLanguages()}e.module("app.idiomas").controller("idiomaController",t),t.$inject=["$scope","$mdDialog","$timeout","idiomasService"]}(angular),function(e){function t(e,t,n,i){function o(e){n.saveSettings(l.form).then(function(t){var n=i.alert();n.textContent("Cambios Guardados con Exito!").title("Alerta!").targetEvent(e).ok("Aceptar"),i.show(n)})}function r(){n.readSettings().then(function(e){l.form=e})}function a(){u(function(e,t,n){l.form.localLang=t[0]})}function c(){u(function(e,t,n){l.form.remoteLang=t[0]})}function u(e){var n=require("electron").ipcRenderer;n.send("open-file-dialog"),n.once("selected-directory",function(n,i){t(e(n,i))})}var l=this;l.form={},l.chooseLocalLang=a,l.chooseRemoteLang=c,l.saveSettings=o,l.readSettings=r,l.readSettings()}e.module("app.settings").controller("settingsController",t),t.$inject=["$scope","$timeout","settingsService","$mdDialog"]}(window.angular),function(e){function t(e){e.$on("$routeChangeStart",function(t,n,i){e.currentTitle=n.$$route.title})}function n(e){e.theme("input","default").primaryPalette("grey")}function i(e,t,n){function i(){t("menuLeft").close()}e.toggleMenu=function(){t("menuLeft").toggle()},e.open=function(e){n.path(e),i()},e.menu={main:[{icon:"language",menuText:"Idiomas",url:"/idiomas"},{icon:"code",menuText:"Etiquetas",url:"/etiquetas"}],settings:[{icon:"settings",menuText:"Configuración",url:"/settings"}]}}var o=["templates","app.config","app.settings","app.idiomas","app.etiquetas","ngMessages","ngMaterial","ngAnimate","angular-toArrayFilter"];e.module("lang-tag-manager",o).run(t).controller("mainController",i).config(n),t.$inject=["$rootScope"],n.$inject=["$mdThemingProvider"],i.$inject=["$scope","$mdSidenav","$location"]}(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
