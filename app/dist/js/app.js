!function(e){e.module("app.settings",["ngRoute"]).config(["$routeProvider",function(e){e.when("/settings",{controller:"settingsController",controllerAs:"ctrl",templateUrl:"settings/settings.html",title:"Configuración"})}])}(window.angular),function(e){function n(e){e.when("/idiomas",{controller:"idiomaController",controllerAs:"ctrl",templateUrl:"idiomas/idiomas.html",title:"Idiomas"})}e.module("app.idiomas",["ngRoute"]).config(n),n.$inject=["$routeProvider"]}(window.angular),function(e){"use strict";function n(e){function n(n){return e.saveSettings(n)}function t(){return e.readSettings()}return{saveSettings:n,readSettings:t}}require("fs");e.module("app.settings").service("settingsService",n),n.$inject=["configService"]}(window.angular),function(e){function n(e,n){function r(){var r=n.defer();return e.readSettings().then(function(e){var n=i.join(e.localLang,o);t.readFile(n,"utf8",function(e,n){e&&r.reject(e);try{var t=JSON.parse(n.trim());r.resolve(t)}catch(e){r.reject(e)}})}),r.promise}function a(e,n){if(e instanceof Array){var t=e.filter(function(e){return e.id==n});return t.length>0}throw"not an array"}function c(c){var u=n.defer();return e.readSettings().then(function(e){var n=i.join(e.localLang,o),s=i.join(e.localLang,c.id),l=i.join(s,"lang.json");r().then(function(e){a(e,c.id)?u.reject({code:"EXTLANG",description:"Este idioma ya existe"}):t.mkdir(s,function(i){i&&u.reject(i),t.writeFile(l,"{}","utf8",function(i){i&&u.reject(i),e.push(c);var o=JSON.stringify(e);t.writeFile(n,o,"utf8",function(e){e&&u.reject(e),u.resolve(!0)})})})})}),u.promise}return{getInstaledLanguages:r,saveLanguage:c}}var t=require("fs"),i=require("path");const o="languages.json";e.module("app.idiomas").service("idiomasService",n),n.$inject=["configService","$q"]}(window.angular),function(e){"use strict";function n(e){function n(n){var o=e.defer();return t.writeFile(i,JSON.stringify(n),function(e){e&&o.reject(e),o.resolve(!0)}),o.promise}function o(){var n=e.defer();return t.exists(i,function(e){e?t.readFile(i,"utf8",function(e,t){e&&n.reject(e),n.resolve(JSON.parse(t.trim()))}):r().then(function(){return o()})}),n.promise}function r(){var n=e.defer();return t.writeFile(i,"{}","utf8",function(e){e&&n.reject(e),n.resolve(!0)}),n.promise}return{saveSettings:n,readSettings:o}}var t=require("fs"),i="./config.json";e.module("app.config",[]).service("configService",n),n.$inject=["$q"]}(window.angular),function(e){function n(e){function n(e){}return{alert:n}}e.module("app.utils",[]).service("utilsService",n),n.$inject=["$mdDialog"]}(window.angular),function(e){function n(e,n,t,i){function o(e){t.saveSettings(s.form).then(function(n){var t=i.alert();t.textContent("Cambios Guardados con Exito!").title("Alerta!").targetEvent(e).ok("Aceptar"),i.show(t)})}function r(){t.readSettings().then(function(e){s.form=e})}function a(){u(function(e,n,t){s.form.localLang=n[0]})}function c(){u(function(e,n,t){s.form.remoteLang=n[0]})}function u(e){var t=require("electron").ipcRenderer;t.send("open-file-dialog"),t.once("selected-directory",function(t,i){n(e(t,i))})}var s=this;s.form={},s.chooseLocalLang=a,s.chooseRemoteLang=c,s.saveSettings=o,s.readSettings=r,s.readSettings()}e.module("app.settings").controller("settingsController",n),n.$inject=["$scope","$timeout","settingsService","$mdDialog"]}(window.angular),function(e){function n(n,t,i,o){function r(){o.getInstaledLanguages().then(function(e){n.idiomas=[].concat(e)})}function a(n){u.idioma={},t.show({title:"Agregar Idioma",controller:c,controllerAs:"ctrl",templateUrl:"idiomas/add-idioma.html",parent:e.element(document.body),targetEvent:n,clickOutsideToClose:!0})}function c(){function e(e){i(function(){n.idiomas.push(r.idioma),o()})}function o(){t.cancel()}var r=this;r.addIdioma=e,r.closeAddDialog=o}var u=this;u.openAddIdioma=a,u.getInstaledLanguages=r,u.getInstaledLanguages()}e.module("app.idiomas").controller("idiomaController",n),n.$inject=["$scope","$mdDialog","$timeout","idiomasService"]}(angular),function(e){function n(e){e.$on("$routeChangeStart",function(n,t,i){e.currentTitle=t.$$route.title})}function t(e,n,t){function i(){n("menuLeft").close()}e.toggleMenu=function(){n("menuLeft").toggle()},e.open=function(e){t.path(e),i()},e.menu={main:[{icon:"language",menuText:"Idiomas",url:"/idiomas"},{icon:"code",menuText:"Etiquetas",url:"/etiquetas"}],settings:[{icon:"settings",menuText:"Configuración",url:"/settings"}]}}var i=["templates","app.config","app.settings","app.idiomas","ngMaterial","ngAnimate"];e.module("lang-tag-manager",i).run(n).controller("mainController",t),n.$inject=["$rootScope"],t.$inject=["$scope","$mdSidenav","$location"]}(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
